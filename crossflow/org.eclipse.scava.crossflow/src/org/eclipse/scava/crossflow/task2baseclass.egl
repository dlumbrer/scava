package [%=package%];

import org.eclipse.scava.crossflow.runtime.FailedJob;
import org.eclipse.scava.crossflow.runtime.Task;
import org.eclipse.scava.crossflow.runtime.Workflow;

public abstract class [%=t.name%]Base extends Task [%if(t.input.notEmpty()){%] implements [%=t.input.collect(s|s.name + "Consumer").concat(",")%][%}%]{
		
	protected [%=w.name%] workflow;
	
	public void setWorkflow([%=w.name%] workflow) {
		this.workflow = workflow;
	}
	
	public Workflow getWorkflow() {
		return workflow;
	}
	
	[%for (p in t.parameters) { %]
	protected [%=p.type%] [%=p.name%];
	
	public void set[%=p.name.ftuc()%]([%=p.type%] [%=p.name%]) {
		this.[%=p.name%] = [%=p.name%];
	}
	
	public [%=p.type%] get[%=p.name.ftuc()%]() {
		return [%=p.name%];
	}
	[%}%]
	
	public String getId(){
		return "[%=t.name%]:"+workflow.getName();
	}
	
	[%for (s in t.output) { %]
	protected [%=s.name%] [%=s.name.ftlc()%];
	
	protected void set[%=s.name%]([%=s.name%] [%=s.name.ftlc()%]) {
		this.[%=s.name.ftlc()%] = [%=s.name.ftlc()%];
	}
	
	protected [%=s.name%] get[%=s.name%]() {
		return [%=s.name.ftlc()%];
	}
	
	public void sendTo[%=s.name%]([%=s.type.name%] [%=s.type.name.ftlc()%]) {
		[%=s.type.name.ftlc()%].setCacheable(this.cacheable);
		[%if(t.isTypeOf(Source)){%]
		[%=s.type.name.ftlc()%].setTransactional(false);
		[%}%]
		[%if(t.multipleOutputs or not (t.output.size==1)) {%]
		hasSentTo[%=s.name%] = true;
		[%}%]
		get[%=s.name%]().send([%=s.type.name.ftlc()%], this.getClass().getName());
	}
	
	[%if(t.multipleOutputs or not (t.output.size==1)) {%]
	boolean hasSentTo[%=s.name%] = false;
	[%}%]
	[%}%]
	
	[%for (s in t.input) { %]
[%=s.createStartOfConsumeMethod()%]
		[%if(not t.multipleOutputs and t.output.size==1) {%]
				[%=t.output.first.type.name%] result = consume[%=s.name%]([%=s.type.name.ftlc()%]);
				if(result != null){
					if(isCacheable())
						result.setCorrelationId([%=s.type.name.ftlc()%].getId());				
					result.setTransactional(false);
					sendTo[%=t.output.first.name%](result);
				}
		[%}else {%]
				consume[%=s.name%]([%=s.type.name.ftlc()%]);
[%=s.sendConfirmationMessage()%]
		[%}%]
[%=s.createEndOfConsumeMethod()%]
	[%}%]
	
	[%if (t.isKindOf(Source)){%]
	public abstract void produce() throws Exception;
	[%}%]
	
}

[%
operation Stream createStartOfConsumeMethod() {%]
	@Override
	public [%if(t.isTypeOf(Task)){%]final[%}else{%][%=out.chop(1)%][%}%] void consume[%=self.name%]WithNotifications([%=self.type.name%] [%=self.type.name.ftlc()%]) {
		
		[%if (not (t.isKindOf(Source) or t.isKindOf(Sink))){%]
		try {
			workflow.get[%=t.name%]s().getSemaphore().acquire();
		} catch (Exception e) {
			workflow.reportInternalException(e);
		}
				
		[%if(t.multipleOutputs or not (t.output.size==1)) {%]
		[%for (ss in t.output) { %]
		hasSentTo[%=ss.name%] = false;
		[%}%]
		[%}%]
				
		Runnable consumer = () -> {		
		[%}%]
			try {
				workflow.setTaskInProgess(this);
[%}%]
[%
operation Stream createEndOfConsumeMethod() {%]

			} catch (Exception ex) {
				try {
					[%=self.type.name.ftlc()%].setFailures([%=self.type.name.ftlc()%].getFailures()+1);
					workflow.getFailedJobsQueue().send(new FailedJob([%=self.type.name.ftlc()%], ex, workflow.getName(), "[%=t.name%]"));
				} catch (Exception e) {
					workflow.reportInternalException(e);
				}
			} finally {
				try {
					[%if (not (t.isKindOf(Source) or t.isKindOf(Sink))){%]
					workflow.get[%=t.name%]s().getSemaphore().release();
					[%}%]
					workflow.setTaskWaiting(this);
				} catch (Exception e) {
					workflow.reportInternalException(e);
				}
			}
		[%if (not (t.isKindOf(Source) or t.isKindOf(Sink))){%]		
		};

		workflow.get[%=t.name%]s().getExecutor().submit(consumer);
		[%}%]
	}
	
	[%if(t.multipleOutputs or t.output.size<>1) {%]
	public abstract void consume[%=self.name%]([%=self.type.name%] [%=self.type.name.ftlc()%]) throws Exception;
	[%}else {%]
	public abstract [%=t.output.first.type.name%] consume[%=self.name%]([%=self.type.name%] [%=self.type.name.ftlc()%]) throws Exception;
	[%}%]
	
[%}%]
[%
operation Stream sendConfirmationMessage() {%]

		[%if(t.output.size>0) {%]
				[%=t.output.first.type.name%] conf = new [%=t.output.first.type.name%]();
				conf.setCorrelationId([%=self.type.name.ftlc()%].getId());
				conf.setIsTransactionSuccessMessage(true);
				conf.setTotalOutputs([%for (ss in t.output) { %](hasSentTo[%=ss.name%] ? 1 : 0)+[%}%][%=out.chop(1)%]);
				[%for (ss in t.output) { %]
				if (hasSentTo[%=ss.name%]) {
					sendTo[%=ss.name%](conf);
				}
				[%}%]
		[%}%]
		
[%}%]